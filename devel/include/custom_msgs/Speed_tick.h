// Generated by gencpp from file custom_msgs/Speed_tick.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_SPEED_TICK_H
#define CUSTOM_MSGS_MESSAGE_SPEED_TICK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msgs
{
template <class ContainerAllocator>
struct Speed_tick_
{
  typedef Speed_tick_<ContainerAllocator> Type;

  Speed_tick_()
    : right_speed(0.0)
    , left_speed(0.0)
    , right_tick(0)
    , left_tick(0)  {
    }
  Speed_tick_(const ContainerAllocator& _alloc)
    : right_speed(0.0)
    , left_speed(0.0)
    , right_tick(0)
    , left_tick(0)  {
  (void)_alloc;
    }



   typedef double _right_speed_type;
  _right_speed_type right_speed;

   typedef double _left_speed_type;
  _left_speed_type left_speed;

   typedef int32_t _right_tick_type;
  _right_tick_type right_tick;

   typedef int32_t _left_tick_type;
  _left_tick_type left_tick;





  typedef boost::shared_ptr< ::custom_msgs::Speed_tick_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::Speed_tick_<ContainerAllocator> const> ConstPtr;

}; // struct Speed_tick_

typedef ::custom_msgs::Speed_tick_<std::allocator<void> > Speed_tick;

typedef boost::shared_ptr< ::custom_msgs::Speed_tick > Speed_tickPtr;
typedef boost::shared_ptr< ::custom_msgs::Speed_tick const> Speed_tickConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::Speed_tick_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::Speed_tick_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msgs::Speed_tick_<ContainerAllocator1> & lhs, const ::custom_msgs::Speed_tick_<ContainerAllocator2> & rhs)
{
  return lhs.right_speed == rhs.right_speed &&
    lhs.left_speed == rhs.left_speed &&
    lhs.right_tick == rhs.right_tick &&
    lhs.left_tick == rhs.left_tick;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msgs::Speed_tick_<ContainerAllocator1> & lhs, const ::custom_msgs::Speed_tick_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::Speed_tick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::Speed_tick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::Speed_tick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::Speed_tick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::Speed_tick_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::Speed_tick_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::Speed_tick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "49db339e4cdd08bb4996af3a92cbcc3d";
  }

  static const char* value(const ::custom_msgs::Speed_tick_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x49db339e4cdd08bbULL;
  static const uint64_t static_value2 = 0x4996af3a92cbcc3dULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::Speed_tick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/Speed_tick";
  }

  static const char* value(const ::custom_msgs::Speed_tick_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::Speed_tick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This represents the right and left speed plus the right and left tick\n"
"\n"
"float64 right_speed\n"
"float64 left_speed\n"
"int32 right_tick\n"
"int32 left_tick\n"
;
  }

  static const char* value(const ::custom_msgs::Speed_tick_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::Speed_tick_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.right_speed);
      stream.next(m.left_speed);
      stream.next(m.right_tick);
      stream.next(m.left_tick);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Speed_tick_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::Speed_tick_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::Speed_tick_<ContainerAllocator>& v)
  {
    s << indent << "right_speed: ";
    Printer<double>::stream(s, indent + "  ", v.right_speed);
    s << indent << "left_speed: ";
    Printer<double>::stream(s, indent + "  ", v.left_speed);
    s << indent << "right_tick: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_tick);
    s << indent << "left_tick: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_tick);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_SPEED_TICK_H

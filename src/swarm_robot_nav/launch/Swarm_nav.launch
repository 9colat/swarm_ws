<launch>
<!-- Lidar node -->
  <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
  <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
  <param name="serial_baudrate"     type="int"    value="115200"/><!--A1/A2 -->
  <param name="frame_id"            type="string" value="base_laser"/>
  <param name="inverted"            type="bool"   value="false"/>
  <param name="angle_compensate"    type="bool"   value="true"/>
</node>
<!--
<node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />
-->
<!-- Odometry node
 <node pkg="odom_node_pkg" type="odom_node_type" name="odom_node" output="screen">
    <param name="odom_param" value="param_value" />
 </node>
-->
<!--static_transform_publisher x y z qx qy qz qw frame_id child_frame_id  period_in_ms  -->
<!-- <node pkg="tf" type="static_transform_publisher" name="base_link_to_lidar" args="-0.012 0 0.0116 0 0 0 base_link base_laser 100" />
<node pkg="tf" type="static_transform_publisher" name="lidar_to_footprint" args="0 -0.0191 0 0 0 0 base_laser base_footprint 100" />
-->
<!-- <node pkg="tf" type="static_transform_publisher" name="base_to_odom" args="-1 -1 0 0 0 0 odom base_link 30" />
<node pkg="tf" type="static_transform_publisher" name="odom_map" args="1 1 0 0 0 0 map odom 30" /> -->

<node name="state_publisher" pkg="swarm_robot_nav" type="state_publisher.py" />

<param name="robot_description" textfile="/home/casper/swarm_ws/src/rudolph_v4_3/urdf/rudolph_v4_3.urdf" />

  <!--<param name="robot_description" command="$(find urdf)/urdf inorder '$(find rudolph_v4_3)/urdf/rudolph_v4_3.urdf' transmission_hw_interface:=$(arg transmission_hw_interface)" /> -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
      <param name="use_gui" value="true"/>
  </node>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
<!--  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find robot_model)/urdf.rviz" />-->
<!--
<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
-->


 <!-- Ros_serial com (com between rpi and teeny)-->
 <node pkg="rosserial_python" type="serial_node.py" name="rosserial_python" output="screen">
    <param name="port" value="/dev/ttyACM0" />
    <param name="baud" value="9600"/>
 </node>

<!-- -->
 <node pkg="localization_data_pub" type="ekf_odom_pub" name="ekf_odom_pub">
 </node>


 <remap from="odom_data_quat" to="odom" />
 <!--<remap from="imu_data" to="imu/data" /> -->
 <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
   <param name="output_frame" value="odom"/>
   <param name="base_footprint_frame" value="base_link"/>
   <param name="freq" value="30.0"/>
   <param name="sensor_timeout" value="1.0"/>
   <param name="odom_used" value="true"/>
   <param name="imu_used" value="false"/>
   <param name="vo_used" value="false"/>
   <param name="gps_used" value="false"/>
   <param name="debug" value="false"/>
   <param name="self_diagnose" value="false"/>
 </node>


 <arg name="map_file" default="/home/casper/swarm_ws/src/swarm_robot_nav/maps/my_map.yaml"/>

 -<node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />


<!-- Initial Pose and Goal Publisher -->
 <!-- Publish: /initialpose, /move_base_simple/goal -->
<node pkg="rviz" type="rviz" name="rviz" args="-d $(find swarm_robot_nav)/maps/my_map.rviz"/>

 <!-- Subscribe: /initialpose, /move_base_simple/goal -->
 <!-- Publish: /initial_2d, /goal_2d -->
 <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
 </node>

 <include file="$(find amcl)/examples/amcl_diff.launch" />

<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
 <rosparam file="$(find swarm_robot_nav)/costmap_common_params.yaml" command="load" ns="global_costmap" />
 <rosparam file="$(find swarm_robot_nav)/costmap_common_params.yaml" command="load" ns="local_costmap" />
 <rosparam file="$(find swarm_robot_nav)/local_costmap_params.yaml" command="load" />
 <rosparam file="$(find swarm_robot_nav)/global_costmap_params.yaml" command="load" />
 <rosparam file="$(find swarm_robot_nav)/base_local_planner_params.yaml" command="load" />
</node>

</launch>

<launch>
<!-- Lidar node -->
  <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
    <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
    <param name="serial_baudrate"     type="int"    value="115200"/><!--A1/A2 -->
    <param name="frame_id"            type="string" value="base_laser"/>
    <param name="inverted"            type="bool"   value="false"/>
    <param name="angle_compensate"    type="bool"   value="true"/>
</node>

<node name="state_publisher" pkg="swarm_robot_nav" type="state_publisher.py" />

<arg
  name="model" />
<param
  name="robot_description" textfile="$(find swarm_robot_nav)/robot_discription/rudolph_v4_3.urdf" />

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
      <param name="use_gui" value="true"/>
  </node>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

 <!-- Ros_serial com (com between rpi and teeny)
 <node pkg="rosserial_python" type="serial_node.py" name="rosseriaodom_data_quatl_python" output="screen">
    <param name="port" value="/dev/ttyACM0" />
    <param name="baud" value="9600"/>
 </node>
 -->


 <node pkg="localization_data_pub" type="ekf_odom_pub" name="ekf_odom_pub">
 </node>


 <remap from="odom_data_quat" to="odom" />
 <!--<remap from="imu_data" to="imu/data" />
 <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
   <param name="output_frame" value="odom"/>
   <param name="base_footprint_frame" value="base_link"/>
   <param name="freq" value="30.0"/>
   <param name="sensor_timeout" value="1.0"/>
   <param name="odom_used" value="true"/>
   <param name="imu_used" value="false"/>
   <param name="vo_used" value="false"/>
   <param name="gps_used" value="false"/>
   <param name="debug" value="false"/>
   <param name="self_diagnose" value="false"/>
 </node>
-->

<!-- -->
 <arg name="map_file" default="$(find swarm_robot_nav)/maps/my_map.yaml" />

 -<node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />




  <param name="/use_sim_time" value="false"/>

<!--
  <include file="$(find hector_mapping)/launch/mapping_default.launch"/>

  <include file="$(find hector_geotiff_launch)/launch/geotiff_mapper.launch">
    <arg name="trajectory_source_frame_name" value="scanmatcher_frame"/>
    <arg name="map_file_path" value="$(arg geotiff_map_file_path)"/>
  </include>
-->

<!-- Initial Pose and Goal Publisher -->
 <!-- Publish: /initialpose, /move_base_simple/goal-->
<node pkg="rviz" type="rviz" name="rviz" args="-d $(find swarm_robot_nav)/maps/viz_hector.rviz"/>

 <include file="$(find amcl)/examples/amcl_diff.launch" />

<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
 <rosparam file="$(find swarm_robot_nav)/costmap_common_params.yaml" command="load" ns="global_costmap" />
 <rosparam file="$(find swarm_robot_nav)/costmap_common_params.yaml" command="load" ns="local_costmap" />
 <rosparam file="$(find swarm_robot_nav)/local_costmap_params.yaml" command="load" />
 <rosparam file="$(find swarm_robot_nav)/global_costmap_params.yaml" command="load" />
 <rosparam file="$(find swarm_robot_nav)/base_local_planner_params.yaml" command="load" />
</node>
<!--turd3_hector Hectorr launch things Only arguments -->
<!--
<arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
<arg name="configuration_basename" default="turtlebot3_lds_2d.lua"/>
-->
<arg name="odom_frame" default="odom"/>
<arg name="base_frame" default="base_footprint"/>
<arg name="scan_subscriber_queue_size" default="5"/>
<arg name="scan_topic" default="scan"/>
<arg name="map_size" default="2048"/>
<arg name="pub_map_odom_transform" default="true"/>
<arg name="tf_map_scanmatch_transform_frame_name" default="scanmatcher_frame"/>

<!--turd3_hector Hectorr launch things w/o arguments -->
<!-- Hector mapping -->
<node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
  <!-- Frame names -->
  <param name="map_frame"  value="map" />
  <param name="odom_frame" value="$(arg odom_frame)" />
  <param name="base_frame" value="$(arg base_frame)" />

  <!-- Tf use -->
  <param name="use_tf_scan_transformation"  value="true"/>
  <param name="use_tf_pose_start_estimate"  value="false"/>
  <param name="pub_map_scanmatch_transform" value="true" />
  <param name="pub_map_odom_transform"      value="$(arg pub_map_odom_transform)"/>
  <param name="tf_map_scanmatch_transform_frame_name" value="$(arg tf_map_scanmatch_transform_frame_name)" />

  <!-- Map size / start point -->
  <param name="map_resolution" value="0.050"/>
  <param name="map_size"       value="$(arg map_size)"/>
  <param name="map_start_x"    value="0.5"/>
  <param name="map_start_y"    value="0.5" />
  <param name="map_multi_res_levels" value="2" />

  <!-- Map update parameters -->
  <param name="update_factor_free"         value="0.4"/>
  <param name="update_factor_occupied"     value="0.9" />
  <param name="map_update_distance_thresh" value="0.1"/>
  <param name="map_update_angle_thresh"    value="0.04" />
  <param name="map_pub_period"             value="2" />
  <param name="laser_z_min_value"          value= "-0.1" />
  <param name="laser_z_max_value"          value= "0.1" />
  <param name="laser_min_dist"             value="0.12" />
  <param name="laser_max_dist"             value="3.5" />

  <!-- Advertising config -->
  <param name="advertise_map_service"      value="true"/>
  <param name="scan_subscriber_queue_size" value="$(arg scan_subscriber_queue_size)"/>
  <param name="scan_topic" value="$(arg scan_topic)"/>

  <!-- Debug parameters -->
  <!--
    <param name="output_timing"    value="false"/>
    <param name="pub_drawings"     value="true"/>
    <param name="pub_debug_output" value="true"/>
  -->
</node>


</launch>
